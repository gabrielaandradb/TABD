drop database instituicao;
create schema if not exists instituicao default character set utf8;
use instituicao;

CREATE TABLE IF NOT EXISTS aluno (
    cod int not null auto_increment,
    nome VARCHAR(45) NULL,
    DataNascimento date,
    PRIMARY KEY (cod)
)  ENGINE=INNODB;

insert into aluno (nome, DataNascimento) values
('Aline', '1990-02-05'),
('Maria', '1995-06-10'),
('Felipe', '2001-12-23'),
('Eduardo', '2000-08-11'),
('Gabriela', '2005-02-22'),
('Regina', '2001-02-28'),
('Caio', '2000-05-05'),
('Rebeca', '1998-05-14'),
('Heitor', '2002-12-14'),
('Julia', '2000-09-20');
select * from aluno;

CREATE TABLE IF NOT EXISTS disciplina (
    CodigoDisci int NOT NULL,
    nome_disci VARCHAR(45) ,
    primary key (CodigoDisci)
)  ENGINE=INNODB;

insert into disciplina (CodigoDisci, nome_disci) values
('001','Microbiologia'),
('002','Química'),
('003','Anatomia'),
('004','Histologia'),
('005','Imunologia');
select * from disciplina;

CREATE TABLE IF NOT EXISTS professor ( 
codProfessor int not null auto_increment, 
nome varchar (45) not null, 
CodigoDisci int not null,
DataContratacao date, 
nome_disci varchar (45),
primary key (codProfessor),
foreign key (CodigoDisci) references disciplina (CodigoDisci)
) engine = InnoDB;

insert into professor values (null,'Carlos','001','2017-08-03','Microbiologia'),
(null,'Rosane','002','2010-06-07','Química'),
(null,'José','003','2015-08-17','Anatomia'),
(null,'Marta','004','2020-03-14','Histologia'),
(null,'Paulo','005','2013-04-20','Imunologia');
select * from professor;

CREATE TABLE IF NOT EXISTS turma (
id int not null,
horas time,
nome varchar (45),
CodigoDisci int not null,
codProfessor int not null,
primary key (id),
foreign key (CodigoDisci) references disciplina (CodigoDisci)
) engine = InnoDB; 

insert into turma values (1,'80:00:00','Aline','001',1),
(2,'80:00:00','Maria','002', 2),
(3,'70:00:00','Felipe','003', 3),
(4,'70:00:00','Eduardo','004', 4),
(5,'70:00:00','Gabriela','005', 5),
(6,'80:00:00','Regina','001', 1),
(7,'80:00:00','Caio','002', 2),
(8,'70:00:00','Rebeca','003', 3),
(9,'70:00:00','Heitor','004', 4),
(10,'70:00:00','Julia','005', 5);
select *from turma;


-- atualizar data da contratação
SET DELIMITER $$
CREATE TRIGGER atualizar_contratacao
BEFORE INSERT ON professor
FOR EACH ROW
BEGIN
    SET NEW.DataContratacao = CURDATE();
END $$
set delimiter ;

insert into professor (nome, CodigoDisci, nome_disci) values
('Carlos', '001', 'Microbiologia');
select*from professor;
show triggers;

-- retorna todos os alunos matriculados em uma determinada disciplina:

DELIMITER $$
CREATE PROCEDURE alunosDisciplina(
    IN codigoDisci int  -- entrar com codigoDisci
)
BEGIN
    SELECT a.cod, a.nome, a.DataNascimento
    FROM aluno a
    JOIN turma t on a.nome = t.nome
    WHERE t.CodigoDisci = codigoDisci;
END$$
delimiter ;

call alunosDisciplina(001);


-- retorna as idades dos alunos matriculados em uma disciplina específica. 
DELIMITER $$
CREATE FUNCTION idadeAlunos(codigoDisciplina INT) 
RETURNS TEXT
DETERMINISTIC
BEGIN
    DECLARE mostrarIdades TEXT;

    SELECT GROUP_CONCAT(
        CONCAT(a.nome,'- ', YEAR(CURDATE())- YEAR(a.DataNascimento), ' anos') 
        SEPARATOR ', '
    )INTO mostrarIdades
    FROM aluno a
    JOIN turma t ON a.nome = t.nome
    WHERE t.CodigoDisci = codigoDisciplina
    ORDER BY a.nome;

    RETURN mostrarIdades;
END$$
DELIMITER ;
SELECT idadeAlunos('002');

